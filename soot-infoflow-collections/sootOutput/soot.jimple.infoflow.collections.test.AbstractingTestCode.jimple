public class soot.jimple.infoflow.collections.test.AbstractingTestCode extends java.lang.Object
{

    public void <init>()
    {
        soot.jimple.infoflow.collections.test.AbstractingTestCode r0;

        r0 := @this: soot.jimple.infoflow.collections.test.AbstractingTestCode;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    java.lang.String unusedContext1(java.util.Map)
    {
        java.util.Map r1;
        soot.jimple.infoflow.collections.test.AbstractingTestCode r4;
        java.lang.StringBuilder $r0;
        java.lang.String $r2, $r3;

        r4 := @this: soot.jimple.infoflow.collections.test.AbstractingTestCode;

        r1 := @parameter0: java.util.Map;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Collection: ");

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    java.lang.String getXXX(java.util.Map)
    {
        java.util.Map r0;
        soot.jimple.infoflow.collections.test.AbstractingTestCode r3;
        java.lang.Object $r1;
        java.lang.String $r2;

        r3 := @this: soot.jimple.infoflow.collections.test.AbstractingTestCode;

        r0 := @parameter0: java.util.Map;

        $r1 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>("XXX");

        $r2 = (java.lang.String) $r1;

        return $r2;
    }

    java.lang.String removeXXX(java.util.Map)
    {
        java.util.Map r0;
        soot.jimple.infoflow.collections.test.AbstractingTestCode r3;
        java.lang.Object $r1;
        java.lang.String $r2;

        r3 := @this: soot.jimple.infoflow.collections.test.AbstractingTestCode;

        r0 := @parameter0: java.util.Map;

        $r1 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>("XXX");

        $r2 = (java.lang.String) $r1;

        return $r2;
    }

    public void testReuse1()
    {
        java.util.HashMap $r0, $r5;
        soot.jimple.infoflow.collections.test.AbstractingTestCode r2;
        java.lang.Object $r3, $r7;
        java.lang.String $r1, $r4, $r6, $r8;

        r2 := @this: soot.jimple.infoflow.collections.test.AbstractingTestCode;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        $r1 = staticinvoke <soot.jimple.infoflow.collections.test.Helper: java.lang.String source()>();

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("XXX", $r1);

        virtualinvoke r2.<soot.jimple.infoflow.collections.test.AbstractingTestCode: java.lang.String unusedContext1(java.util.Map)>($r0);

        $r3 = interfaceinvoke $r0.<java.util.Map: java.lang.Object get(java.lang.Object)>("XXX");

        $r4 = (java.lang.String) $r3;

        staticinvoke <soot.jimple.infoflow.collections.test.Helper: void sink(java.lang.String)>($r4);

        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>()>();

        $r6 = staticinvoke <soot.jimple.infoflow.collections.test.Helper: java.lang.String source()>();

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("YYY", $r6);

        virtualinvoke r2.<soot.jimple.infoflow.collections.test.AbstractingTestCode: java.lang.String unusedContext1(java.util.Map)>($r5);

        $r7 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>("YYY");

        $r8 = (java.lang.String) $r7;

        staticinvoke <soot.jimple.infoflow.collections.test.Helper: void sink(java.lang.String)>($r8);

        return;
    }

    public void testReuse2()
    {
        soot.jimple.infoflow.collections.test.AbstractingTestCode r2;
        java.util.HashMap $r0, $r4;
        java.lang.String $r1, $r3, $r5, $r6;

        r2 := @this: soot.jimple.infoflow.collections.test.AbstractingTestCode;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        $r1 = staticinvoke <soot.jimple.infoflow.collections.test.Helper: java.lang.String source()>();

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("XXX", $r1);

        $r3 = virtualinvoke r2.<soot.jimple.infoflow.collections.test.AbstractingTestCode: java.lang.String unusedContext1(java.util.Map)>($r0);

        staticinvoke <soot.jimple.infoflow.collections.test.Helper: void sink(java.lang.String)>($r3);

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        $r5 = staticinvoke <soot.jimple.infoflow.collections.test.Helper: java.lang.String source()>();

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("YYY", $r5);

        $r6 = virtualinvoke r2.<soot.jimple.infoflow.collections.test.AbstractingTestCode: java.lang.String unusedContext1(java.util.Map)>($r4);

        staticinvoke <soot.jimple.infoflow.collections.test.Helper: void sink(java.lang.String)>($r6);

        return;
    }

    public void testReuse3()
    {
        java.io.PrintStream $r5;
        java.util.HashMap $r0, $r6;
        soot.jimple.infoflow.collections.test.AbstractingTestCode r2;
        java.lang.Object $r3, $r7;
        java.lang.String $r1, $r4, $r8;

        r2 := @this: soot.jimple.infoflow.collections.test.AbstractingTestCode;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        $r1 = staticinvoke <soot.jimple.infoflow.collections.test.Helper: java.lang.String source()>();

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("XXX", $r1);

        virtualinvoke r2.<soot.jimple.infoflow.collections.test.AbstractingTestCode: java.lang.String unusedContext1(java.util.Map)>($r0);

        $r3 = interfaceinvoke $r0.<java.util.Map: java.lang.Object get(java.lang.Object)>("XXX");

        $r4 = (java.lang.String) $r3;

        staticinvoke <soot.jimple.infoflow.collections.test.Helper: void sink(java.lang.String)>($r4);

        $r5 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>("Delay");

        $r6 = new java.util.HashMap;

        specialinvoke $r6.<java.util.HashMap: void <init>()>();

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("YYY", $r1);

        virtualinvoke r2.<soot.jimple.infoflow.collections.test.AbstractingTestCode: java.lang.String unusedContext1(java.util.Map)>($r6);

        $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>("YYY");

        $r8 = (java.lang.String) $r7;

        staticinvoke <soot.jimple.infoflow.collections.test.Helper: void sink(java.lang.String)>($r8);

        return;
    }

    public void testReuse4()
    {
        java.io.PrintStream $r4;
        soot.jimple.infoflow.collections.test.AbstractingTestCode r2;
        java.util.HashMap $r0, $r5;
        java.lang.String $r1, $r3, $r6;

        r2 := @this: soot.jimple.infoflow.collections.test.AbstractingTestCode;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        $r1 = staticinvoke <soot.jimple.infoflow.collections.test.Helper: java.lang.String source()>();

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("XXX", $r1);

        $r3 = virtualinvoke r2.<soot.jimple.infoflow.collections.test.AbstractingTestCode: java.lang.String unusedContext1(java.util.Map)>($r0);

        staticinvoke <soot.jimple.infoflow.collections.test.Helper: void sink(java.lang.String)>($r3);

        $r4 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>("Delay");

        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>()>();

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("YYY", $r1);

        $r6 = virtualinvoke r2.<soot.jimple.infoflow.collections.test.AbstractingTestCode: java.lang.String unusedContext1(java.util.Map)>($r5);

        staticinvoke <soot.jimple.infoflow.collections.test.Helper: void sink(java.lang.String)>($r6);

        return;
    }

    public void testGet1()
    {
        soot.jimple.infoflow.collections.test.AbstractingTestCode r2;
        java.util.HashMap $r0, $r4;
        java.lang.String $r1, $r3, $r5, $r6;

        r2 := @this: soot.jimple.infoflow.collections.test.AbstractingTestCode;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        $r1 = staticinvoke <soot.jimple.infoflow.collections.test.Helper: java.lang.String source()>();

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("XXX", $r1);

        $r3 = virtualinvoke r2.<soot.jimple.infoflow.collections.test.AbstractingTestCode: java.lang.String getXXX(java.util.Map)>($r0);

        staticinvoke <soot.jimple.infoflow.collections.test.Helper: void sink(java.lang.String)>($r3);

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        $r5 = staticinvoke <soot.jimple.infoflow.collections.test.Helper: java.lang.String source()>();

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("YYY", $r5);

        $r6 = virtualinvoke r2.<soot.jimple.infoflow.collections.test.AbstractingTestCode: java.lang.String getXXX(java.util.Map)>($r4);

        staticinvoke <soot.jimple.infoflow.collections.test.Helper: void sink(java.lang.String)>($r6);

        return;
    }

    public void testGet2()
    {
        java.io.PrintStream $r4;
        soot.jimple.infoflow.collections.test.AbstractingTestCode r2;
        java.util.HashMap $r0, $r5;
        java.lang.String $r1, $r3, $r6;

        r2 := @this: soot.jimple.infoflow.collections.test.AbstractingTestCode;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        $r1 = staticinvoke <soot.jimple.infoflow.collections.test.Helper: java.lang.String source()>();

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("XXX", $r1);

        $r3 = virtualinvoke r2.<soot.jimple.infoflow.collections.test.AbstractingTestCode: java.lang.String getXXX(java.util.Map)>($r0);

        staticinvoke <soot.jimple.infoflow.collections.test.Helper: void sink(java.lang.String)>($r3);

        $r4 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>("Delay");

        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>()>();

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("YYY", $r1);

        $r6 = virtualinvoke r2.<soot.jimple.infoflow.collections.test.AbstractingTestCode: java.lang.String getXXX(java.util.Map)>($r5);

        staticinvoke <soot.jimple.infoflow.collections.test.Helper: void sink(java.lang.String)>($r6);

        return;
    }

    public void testRemove1()
    {
        soot.jimple.infoflow.collections.test.AbstractingTestCode r2;
        java.util.HashMap $r0, $r4;
        java.lang.String $r1, $r3, $r5, $r6;

        r2 := @this: soot.jimple.infoflow.collections.test.AbstractingTestCode;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        $r1 = staticinvoke <soot.jimple.infoflow.collections.test.Helper: java.lang.String source()>();

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("XXX", $r1);

        $r3 = virtualinvoke r2.<soot.jimple.infoflow.collections.test.AbstractingTestCode: java.lang.String removeXXX(java.util.Map)>($r0);

        staticinvoke <soot.jimple.infoflow.collections.test.Helper: void sink(java.lang.String)>($r3);

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        $r5 = staticinvoke <soot.jimple.infoflow.collections.test.Helper: java.lang.String source()>();

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("YYY", $r5);

        $r6 = virtualinvoke r2.<soot.jimple.infoflow.collections.test.AbstractingTestCode: java.lang.String removeXXX(java.util.Map)>($r4);

        staticinvoke <soot.jimple.infoflow.collections.test.Helper: void sink(java.lang.String)>($r6);

        return;
    }

    public void testRemove2()
    {
        java.io.PrintStream $r4;
        soot.jimple.infoflow.collections.test.AbstractingTestCode r2;
        java.util.HashMap $r0, $r5;
        java.lang.String $r1, $r3, $r6;

        r2 := @this: soot.jimple.infoflow.collections.test.AbstractingTestCode;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        $r1 = staticinvoke <soot.jimple.infoflow.collections.test.Helper: java.lang.String source()>();

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("XXX", $r1);

        $r3 = virtualinvoke r2.<soot.jimple.infoflow.collections.test.AbstractingTestCode: java.lang.String removeXXX(java.util.Map)>($r0);

        staticinvoke <soot.jimple.infoflow.collections.test.Helper: void sink(java.lang.String)>($r3);

        $r4 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>("Delay");

        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>()>();

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("YYY", $r1);

        $r6 = virtualinvoke r2.<soot.jimple.infoflow.collections.test.AbstractingTestCode: java.lang.String removeXXX(java.util.Map)>($r5);

        staticinvoke <soot.jimple.infoflow.collections.test.Helper: void sink(java.lang.String)>($r6);

        return;
    }

    private java.lang.String badCallee1(java.util.Map)
    {
        soot.jimple.infoflow.collections.test.AbstractingTestCode r0;
        java.lang.String $r2;
        java.util.Map r1;

        r0 := @this: soot.jimple.infoflow.collections.test.AbstractingTestCode;

        r1 := @parameter0: java.util.Map;

        $r2 = virtualinvoke r0.<soot.jimple.infoflow.collections.test.AbstractingTestCode: java.lang.String getXXX(java.util.Map)>(r1);

        return $r2;
    }

    private java.lang.String badCallee2(java.util.Map)
    {
        soot.jimple.infoflow.collections.test.AbstractingTestCode r0;
        java.lang.String $r2;
        java.util.Map r1;

        r0 := @this: soot.jimple.infoflow.collections.test.AbstractingTestCode;

        r1 := @parameter0: java.util.Map;

        $r2 = virtualinvoke r0.<soot.jimple.infoflow.collections.test.AbstractingTestCode: java.lang.String removeXXX(java.util.Map)>(r1);

        return $r2;
    }

    public void testReinjectInCallee1()
    {
        soot.jimple.infoflow.collections.test.AbstractingTestCode r2;
        java.util.HashMap $r0, $r4;
        java.lang.String $r1, $r3, $r5, $r6;

        r2 := @this: soot.jimple.infoflow.collections.test.AbstractingTestCode;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        $r1 = staticinvoke <soot.jimple.infoflow.collections.test.Helper: java.lang.String source()>();

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("XXX", $r1);

        $r3 = virtualinvoke r2.<soot.jimple.infoflow.collections.test.AbstractingTestCode: java.lang.String badCallee1(java.util.Map)>($r0);

        staticinvoke <soot.jimple.infoflow.collections.test.Helper: void sink(java.lang.String)>($r3);

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        $r5 = staticinvoke <soot.jimple.infoflow.collections.test.Helper: java.lang.String source()>();

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("YYY", $r5);

        $r6 = virtualinvoke r2.<soot.jimple.infoflow.collections.test.AbstractingTestCode: java.lang.String badCallee1(java.util.Map)>($r4);

        staticinvoke <soot.jimple.infoflow.collections.test.Helper: void sink(java.lang.String)>($r6);

        return;
    }

    public void testReinjectInCallee2()
    {
        java.io.PrintStream $r4;
        soot.jimple.infoflow.collections.test.AbstractingTestCode r2;
        java.util.HashMap $r0, $r5;
        java.lang.String $r1, $r3, $r6;

        r2 := @this: soot.jimple.infoflow.collections.test.AbstractingTestCode;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        $r1 = staticinvoke <soot.jimple.infoflow.collections.test.Helper: java.lang.String source()>();

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("XXX", $r1);

        $r3 = virtualinvoke r2.<soot.jimple.infoflow.collections.test.AbstractingTestCode: java.lang.String badCallee1(java.util.Map)>($r0);

        staticinvoke <soot.jimple.infoflow.collections.test.Helper: void sink(java.lang.String)>($r3);

        $r4 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>("Delay");

        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>()>();

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("YYY", $r1);

        $r6 = virtualinvoke r2.<soot.jimple.infoflow.collections.test.AbstractingTestCode: java.lang.String badCallee1(java.util.Map)>($r5);

        staticinvoke <soot.jimple.infoflow.collections.test.Helper: void sink(java.lang.String)>($r6);

        return;
    }

    public void testReinjectInCallee3()
    {
        soot.jimple.infoflow.collections.test.AbstractingTestCode r2;
        java.util.HashMap $r0, $r4;
        java.lang.String $r1, $r3, $r5, $r6;

        r2 := @this: soot.jimple.infoflow.collections.test.AbstractingTestCode;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        $r1 = staticinvoke <soot.jimple.infoflow.collections.test.Helper: java.lang.String source()>();

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("XXX", $r1);

        $r3 = virtualinvoke r2.<soot.jimple.infoflow.collections.test.AbstractingTestCode: java.lang.String badCallee2(java.util.Map)>($r0);

        staticinvoke <soot.jimple.infoflow.collections.test.Helper: void sink(java.lang.String)>($r3);

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        $r5 = staticinvoke <soot.jimple.infoflow.collections.test.Helper: java.lang.String source()>();

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("YYY", $r5);

        $r6 = virtualinvoke r2.<soot.jimple.infoflow.collections.test.AbstractingTestCode: java.lang.String badCallee2(java.util.Map)>($r4);

        staticinvoke <soot.jimple.infoflow.collections.test.Helper: void sink(java.lang.String)>($r6);

        return;
    }

    public void testReinjectInCallee4()
    {
        java.io.PrintStream $r4;
        soot.jimple.infoflow.collections.test.AbstractingTestCode r2;
        java.util.HashMap $r0, $r5;
        java.lang.String $r1, $r3, $r6;

        r2 := @this: soot.jimple.infoflow.collections.test.AbstractingTestCode;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        $r1 = staticinvoke <soot.jimple.infoflow.collections.test.Helper: java.lang.String source()>();

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("XXX", $r1);

        $r3 = virtualinvoke r2.<soot.jimple.infoflow.collections.test.AbstractingTestCode: java.lang.String badCallee2(java.util.Map)>($r0);

        staticinvoke <soot.jimple.infoflow.collections.test.Helper: void sink(java.lang.String)>($r3);

        $r4 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>("Delay");

        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>()>();

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("YYY", $r1);

        $r6 = virtualinvoke r2.<soot.jimple.infoflow.collections.test.AbstractingTestCode: java.lang.String badCallee2(java.util.Map)>($r5);

        staticinvoke <soot.jimple.infoflow.collections.test.Helper: void sink(java.lang.String)>($r6);

        return;
    }
}
